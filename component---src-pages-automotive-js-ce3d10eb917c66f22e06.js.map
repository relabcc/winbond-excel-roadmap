{"version":3,"file":"component---src-pages-automotive-js-ce3d10eb917c66f22e06.js","mappings":"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","sources":["webpack://styled-gatsby-starter/./src/hooks/useYearControl.js","webpack://styled-gatsby-starter/./src/containers/SheetDataTable.js","webpack://styled-gatsby-starter/./src/containers/MarketingPage.js","webpack://styled-gatsby-starter/./src/pages/automotive.js"],"sourcesContent":["import React, { useMemo, useState } from 'react'\nimport Flex from 'components/Flex'\nimport Text from 'components/Text'\nimport Box from 'components/Box'\n\nconst useYearControl = () => {\n  const [startYear, setStartYear] = useState(() => new Date().getFullYear())\n  const yearControl = useMemo(() => (\n    <Flex as=\"label\" my=\"1em\" alignItems=\"center\">\n      <Text mr=\"0.5em\">起始年分</Text>\n      <Box width=\"12em\">\n        <input\n          style={{ lineHeight: 2 }}\n          type=\"number\"\n          value={startYear}\n          onChange={e => setStartYear(+e.target.value)}\n        />\n      </Box>\n    </Flex>\n  ), [startYear])\n  return {\n    startYear,\n    yearControl,\n  }\n}\n\nexport default useYearControl\n","import React, { useMemo, forwardRef, useRef, useEffect } from 'react';\nimport { useTable, useFilters } from 'react-table'\nimport styled from 'styled-components'\nimport isObject from 'lodash/isObject'\n\nimport Box from '../components/Box'\n\nconst StyledTable = styled.table`\nwidth: max-content;\nth,\ntd {\n  white-space: pre-wrap;\n  padding: 0.5em;\n}\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n`\n\n// const IndeterminateCheckbox = forwardRef(\n//   ({ indeterminate, ...rest }, ref) => {\n//     const defaultRef = useRef()\n//     const resolvedRef = ref || defaultRef\n\n//     useEffect(() => {\n//       resolvedRef.current.indeterminate = indeterminate\n//     }, [resolvedRef, indeterminate])\n\n//     return (\n//       <>\n//         <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n//       </>\n//     )\n//   }\n// )\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <StyledInput\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\nconst defaultColumn = {\n  Filter: DefaultColumnFilter,\n  canFilter: false,\n}\n\nconst SheetDataTable = ({ data, headerRow }) => {\n  const columns = useMemo(() => {\n    const cols = headerRow.map((Header, i) => {\n      const col = isObject(Header) ? Object.assign({}, Header) : { Header, accessor: d => d[i], id: i }\n      return col\n    })\n    return cols\n  }, [headerRow])\n  const tableInstance = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // filterTypes,\n    initialState: {\n      selectedRowIds: data.reduce((sels, r, id) => {\n        sels[id] = true\n        return sels\n      }, {}),\n    },\n  },\n  useFilters,\n  // useRowSelect,\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = tableInstance\n\n  // useEffect(() => {\n  //   onSelectRow(selectedRowIds)\n  // }, [onSelectRow, selectedRowIds])\n  // console.log(headerRow)\n  return (\n    <Box overflowX=\"auto\">\n      <StyledTable {...getTableProps()}>\n        <thead>\n          {// Loop over the header rows\n          headerGroups.map(headerGroup => (\n            // Apply the header row props\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {// Loop over the headers in each row\n              headerGroup.headers.map((column, i) => (\n                // Apply the header cell props\n                <th {...column.getHeaderProps()}>\n                  {// Render the header\n                  column.render('Header')}\n                  <div>{column.canFilter && i === 0 ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        {/* Apply the table body props */}\n        <tbody {...getTableBodyProps()}>\n          {// Loop over the table rows\n          rows.map(row => {\n            // Prepare the row for display\n            prepareRow(row)\n            return (\n              // Apply the row props\n              <tr {...row.getRowProps()}>\n                {// Loop over the rows cells\n                row.cells.map(cell => {\n                  // Apply the cell props\n                  return (\n                    <td {...cell.getCellProps()}>\n                      {// Render the cell contents\n                      cell.render('Cell')}\n                    </td>\n                  )\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </StyledTable>\n    </Box>\n  )\n};\n\nSheetDataTable.defaultProps = {\n  onSelectRow: () => {},\n}\n\nexport default SheetDataTable;\n","import React, { useState, useMemo } from 'react'\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\nimport size from 'lodash/size'\nimport { Link as GatsbyLink } from 'gatsby'\n\nimport Container from '../components/Container'\nimport Button from '../components/Button'\nimport Pagination from '../components/Pagination'\n// import { responsive } from '../components/ThemeProvider/theme';\n\nimport SheetDataTable from './SheetDataTable'\nimport PageControl from './PageControl'\nimport Downloader from './Downloader'\n\nimport CompareSummary from './CompareSummary';\nimport SheetLoader from './SheetLoader';\nimport Link from 'components/Link';\nimport useTableHeader from 'hooks/useTableHeader';\nimport useYearControl from 'hooks/useYearControl';\n\n// const colorKeys = [{}, {}]\n// const getColor = (name, i = 0) => {\n//   const keys = colorKeys[i]\n//   if (typeof keys[name] !== 'number') {\n//     keys[name] = (max(Object.values(keys)) || 0) + 1\n//   }\n//   return keys[name]\n// }\n\nconst SheetData = ({ data, compareSheetData, selectedSheet }) => {\n  const [downloading, setDownloading] = useState()\n  const { startYear, yearControl } = useYearControl()\n  // const [selectedRow, setSelectedRow] = useState({})\n  const [page, setPage] = useState(0)\n\n  const doubleHeader = useMemo(() => data && data[0].some(h => !h), [data])\n  const headerRow = useTableHeader(data)\n  const tableData = useMemo(() => data ? data.slice(doubleHeader ? 2 : 1) : [], [data, doubleHeader])\n  const pages = useMemo(() => {\n    return tableData.reduce((all, row) => {\n      let i = all.length - 1\n      if (row[0]) {\n        i = all.push([]) - 1\n      }\n      all[i].push(row)\n      return all\n    }, [])\n  }, [tableData])\n\n  const compareData = useMemo(() => (compareSheetData) ? compareSheetData.slice(doubleHeader ? 2 : 1) : [], [compareSheetData, doubleHeader])\n  const [compareMark, comparePages] = useMemo(() => {\n    if (!size(compareData)) return [null, null]\n    let page = 0\n    return compareData.reduce(([all, pages], row) => {\n      if (row[0]) page += 1\n      all[row[1]] = row\n      pages[row[1]] = page\n      return [all, pages]\n    }, [{}, {}])\n  }, [compareData])\n  return (\n    <Tabs style={{ marginTop: '2em' }}>\n      <TabList>\n        <Tab>簡報產生器</Tab>\n        <Tab disabled={!compareData.length}>更新對照表</Tab>\n      </TabList>\n      <TabPanel>\n        {yearControl}\n        {pages && pages[page] && (\n          <>\n            <SheetDataTable\n              data={pages[page]}\n              headerRow={headerRow}\n            // onSelectRow={setSelectedRow}\n            />\n            <Pagination\n              pageCount={pages.length}\n              pageRangeDisplayed={5}\n              marginPagesDisplayed={2}\n              onPageChange={({ selected }) => setPage(selected)}\n            />\n            <PageControl\n              key={selectedSheet}\n              allData={tableData}\n              headerRow={headerRow.slice(0, headerRow.length - 2)}\n              page={page}\n              data={pages[page]}\n              compareMark={compareMark}\n              sheetName={selectedSheet}\n              startYear={startYear}\n            />\n            <Button onClick={() => setDownloading(true)} disabled={downloading}>\n              批次下載{downloading ? '中...' : ` (${pages.length}頁)`}\n            </Button>\n            {downloading && (\n              <Downloader\n                allData={tableData}\n                headerRow={headerRow.slice(0, headerRow.length - 2)}\n                pages={pages}\n                compareMark={compareMark}\n                sheetName={selectedSheet}\n                startYear={startYear}\n                onDownloaded={() => setDownloading(false)}\n              />\n            )}\n          </>\n        )}\n      </TabPanel>\n      <TabPanel>\n        <CompareSummary\n          data={pages}\n          headerRow={headerRow}\n          compareMark={compareMark}\n          sheetName={selectedSheet}\n          comparePages={comparePages}\n        />\n      </TabPanel>\n    </Tabs>\n  )\n}\n\nconst MarketingPage = () => {\n  return (\n    <Container>\n      <Link as={GatsbyLink} to=\"/\">\n        {`< Home`}\n      </Link>\n      <SheetLoader name=\"marketing\">\n        <SheetData />\n      </SheetLoader>\n    </Container>\n  )\n}\n\nexport default MarketingPage\n","import withAuthChecker from 'containers/withAuthChecker'\nimport Page from 'containers/MarketingPage'\n\nexport default withAuthChecker(Page)\n"],"names":["useState","Date","getFullYear","startYear","setStartYear","yearControl","useMemo","as","my","alignItems","mr","width","style","lineHeight","type","value","onChange","e","target","StyledTable","styled","StyledInput","defaultColumn","Filter","column","filterValue","preFilteredRows","setFilter","count","length","undefined","placeholder","canFilter","SheetDataTable","data","headerRow","columns","map","Header","i","isObject","Object","assign","accessor","d","id","tableInstance","useTable","initialState","selectedRowIds","reduce","sels","r","useFilters","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","Box","overflowX","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","row","getRowProps","cells","cell","getCellProps","defaultProps","onSelectRow","SheetData","compareSheetData","selectedSheet","downloading","setDownloading","useYearControl","page","setPage","doubleHeader","some","h","useTableHeader","tableData","slice","pages","all","push","compareData","size","compareMark","comparePages","marginTop","disabled","Pagination","pageCount","pageRangeDisplayed","marginPagesDisplayed","onPageChange","selected","PageControl","key","allData","sheetName","Button","onClick","Downloader","onDownloaded","CompareSummary","Container","Link","GatsbyLink","to","SheetLoader","name","withAuthChecker","Page"],"sourceRoot":""}